name: Ê∏ÖÁêÜÂ∑•‰ΩúÊµÅËøêË°åËÆ∞ÂΩïÂíåÁºìÂ≠ò

on:
  workflow_dispatch:
    inputs:
      workflow_name:
        type: choice
        description: 'Ê∏ÖÁêÜÁöÑÂ∑•‰ΩúÊµÅÂêçÁß∞'
        required: true
        default: 'Build TCQT'
        options:
          - Build TCQT
      count:
        description: 'ÊúÄÂ§öÂ§ÑÁêÜÁöÑËøêË°åÊ¨°Êï∞Ôºà0=Êó†ÈôêÂà∂Ôºâ'
        required: false
        default: '20'
      keep_latest:
        description: '‰øùÁïôÊúÄËøëÂ§öÂ∞ëÊ¨°ËøêË°å‰∏çÂà†Èô§ÔºàÊó†ËÆ∫Áä∂ÊÄÅÔºâ'
        required: false
        type: number
        default: 0
      delete_failed:
        description: 'Âà†Èô§Â§±Ë¥•ÁöÑËøêË°åËÆ∞ÂΩïÔºü'
        required: false
        type: boolean
        default: true
      delete_success:
        description: 'Âà†Èô§ÊàêÂäüÁöÑËøêË°åËÆ∞ÂΩïÔºü'
        required: false
        type: boolean
        default: false
      delete_cancelled:
        description: 'Âà†Èô§ÂèñÊ∂àÁöÑËøêË°åËÆ∞ÂΩïÔºü'
        required: false
        type: boolean
        default: true
      reverse_order:
        description: '‰ªéÊóßÂà∞Êñ∞ÂºÄÂßãÊ∏ÖÁêÜÔºü'
        required: false
        type: boolean
        default: false
      clear_cache:
        description: 'ÊòØÂê¶Ê∏ÖÁêÜÊûÑÂª∫ÁºìÂ≠òÔºü'
        required: false
        type: boolean
        default: true
      cancel_all:
        description: 'ÊòØÂê¶ÂèñÊ∂àËøêË°å‰∏≠ÁöÑÊâÄÊúâÊûÑÂª∫Ôºü'
        required: false
        type: boolean
        default: false

permissions:
  actions: write

jobs:
  cleanup:
    runs-on: ubuntu-latest

    steps:
      - name: ÂÆâË£ÖÁéØÂ¢É
        run: |
          sudo apt-get update
          sudo apt-get install -y gh jq

      - name: ËÆ§ËØÅ GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Ê∏ÖÁêÜÊåáÂÆöÂ∑•‰ΩúÊµÅËøêË°åËÆ∞ÂΩï
        env:
          REPO: ${{ github.repository }}
          COUNT: ${{ inputs.count }}
          KEEP_LATEST: ${{ inputs.keep_latest }}
          DELETE_FAILED: ${{ inputs.delete_failed }}
          DELETE_SUCCESS: ${{ inputs.delete_success }}
          DELETE_CANCELLED: ${{ inputs.delete_cancelled }}
          REVERSE_ORDER: ${{ inputs.reverse_order }}
          CANCEL_ALL: ${{ inputs.cancel_all }}
          WORKFLOW_NAME: ${{ inputs.workflow_name }}
          CURRENT_RUN_ID: ${{ github.run_id }}
        run: |
          set -e

          echo "üîç Êü•ÊâæÂ∑•‰ΩúÊµÅ \"$WORKFLOW_NAME\" ÁöÑ ID..."
          WORKFLOW_ID=$(gh api repos/$REPO/actions/workflows | jq -r ".workflows[] | select(.name == \"$WORKFLOW_NAME\") | .id")
          if [ -z "$WORKFLOW_ID" ]; then
            echo "‚ùå Êú™ÊâæÂà∞Â∑•‰ΩúÊµÅ \"$WORKFLOW_NAME\"ÔºåÈÄÄÂá∫„ÄÇ"
            exit 1
          fi

          echo "üì• ÂàÜÈ°µËé∑ÂèñÊâÄÊúâËøêË°åËÆ∞ÂΩï..."
          PER_PAGE=100
          PAGE=1
          ALL_RUNS="[]"
          while true; do
            RESP=$(gh api "repos/$REPO/actions/workflows/$WORKFLOW_ID/runs?per_page=$PER_PAGE&page=$PAGE" 2>/dev/null || echo "{}")
            RUNS=$(echo "$RESP" | jq '.workflow_runs // []')
            COUNT_THIS_PAGE=$(echo "$RUNS" | jq 'length')
            if [ "$COUNT_THIS_PAGE" -eq 0 ]; then break; fi
            ALL_RUNS=$(jq -s 'add' <(echo "$ALL_RUNS") <(echo "$RUNS"))
            PAGE=$((PAGE + 1))
          done

          TOTAL_RUNS=$(echo "$ALL_RUNS" | jq 'length')
          echo "‚úÖ Ëé∑ÂèñÂà∞ $TOTAL_RUNS Êù°ËøêË°åËÆ∞ÂΩï„ÄÇ"

          if [[ "$CANCEL_ALL" == "true" ]]; then
            echo "‚úã ÂèñÊ∂àËøõË°å‰∏≠ÊàñÊéíÈòü‰∏≠ÁöÑËøêË°åÔºà‰∏çÂåÖÊã¨ÂΩìÂâçÔºâ..."
            CANCEL_COUNT=0
            echo "$ALL_RUNS" | jq -c '.[] | select(.status == "in_progress" or .status == "queued")' | while read -r run; do
              ID=$(echo "$run" | jq -r '.id')
              if [[ "$ID" == "$CURRENT_RUN_ID" ]]; then continue; fi
              echo "  ‚Üí ÂèñÊ∂àËøêË°å ID: $ID"
              gh api -X POST "repos/$REPO/actions/runs/$ID/cancel" >/dev/null 2>&1 && CANCEL_COUNT=$((CANCEL_COUNT + 1))
            done
            echo "‚úÖ Â∑≤ÂèñÊ∂à $CANCEL_COUNT Êù°ËøêË°å„ÄÇ"
          fi

          echo "üßπ ÂºÄÂßãÂà†Èô§Á¨¶ÂêàÊù°‰ª∂ÁöÑËøêË°åËÆ∞ÂΩï..."
          if [[ "$REVERSE_ORDER" == "true" ]]; then
            SORTED_RUNS=$(echo "$ALL_RUNS" | jq 'sort_by(.run_started_at)')
          else
            SORTED_RUNS=$(echo "$ALL_RUNS" | jq 'sort_by(.run_started_at) | reverse')
          fi

          if [[ "$KEEP_LATEST" -gt 0 ]]; then
            SORTED_RUNS=$(echo "$SORTED_RUNS" | jq ".[$KEEP_LATEST:]")
            echo "  ‚Üí ‰øùÁïôÊúÄËøë $KEEP_LATEST Êù°ËøêË°åËÆ∞ÂΩï"
          fi

          if [[ "$COUNT" -gt 0 ]]; then
            TO_DELETE_RUNS=$(echo "$SORTED_RUNS" | jq ".[0:$COUNT]")
          else
            TO_DELETE_RUNS="$SORTED_RUNS"
          fi

          DELETED_COUNT=0
          echo "$TO_DELETE_RUNS" | jq -c '.[]' | while read -r run; do
            ID=$(echo "$run" | jq -r '.id')
            STATUS=$(echo "$run" | jq -r '.conclusion')
            STATE=$(echo "$run" | jq -r '.status')

            if [[ "$STATE" == "in_progress" || "$STATE" == "queued" ]]; then continue; fi
            if [[ "$STATUS" == "failure" && "$DELETE_FAILED" != "true" ]]; then continue; fi
            if [[ "$STATUS" == "success" && "$DELETE_SUCCESS" != "true" ]]; then continue; fi
            if [[ "$STATUS" == "cancelled" && "$DELETE_CANCELLED" != "true" ]]; then continue; fi

            echo "  ‚Üí Âà†Èô§ËøêË°å ID: $IDÔºàÁä∂ÊÄÅ: $STATUSÔºâ"
            gh api -X DELETE "repos/$REPO/actions/runs/$ID" >/dev/null 2>&1 && DELETED_COUNT=$((DELETED_COUNT + 1))
          done

          echo "‚úÖ ÂÖ±Âà†Èô§ËøêË°åËÆ∞ÂΩï: $DELETED_COUNT"

  clean-caches:
    runs-on: ubuntu-latest
    needs: cleanup
    if: ${{ inputs.clear_cache == true || inputs.clear_cache == 'true' }}
    permissions:
      actions: write
    steps:
      - name: Ê∏ÖÁêÜ gradle ÁºìÂ≠ò
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo } = context.repo;
            let totalDeleted = 0;
            let page = 1;
            const prefix = 'gradle-';

            core.info('üîç ÂºÄÂßãÊâ´Êèè gradle ÁºìÂ≠ò...');

            while (true) {
              const res = await github.rest.actions.getActionsCacheList({
                owner,
                repo,
                per_page: 100,
                page: page
              });

              const caches = res.data.actions_caches;
              if (!caches || caches.length === 0) break;

              for (const cache of caches) {
                if (cache.key.startsWith(prefix)) {
                  core.info(`üßπ Âà†Èô§ÁºìÂ≠ò: ${cache.key} (ID: ${cache.id})`);
                  await github.rest.actions.deleteActionsCacheById({
                    owner,
                    repo,
                    cache_id: cache.id
                  });
                  totalDeleted++;
                }
              }

              if (caches.length < 100) break;
              page++;
            }

            if (totalDeleted === 0) {
              core.info('‚úÖ Êó†ÈúÄÂà†Èô§ gradle ÁºìÂ≠ò„ÄÇ');
            } else {
              core.info(`‚úÖ ÂÖ±Âà†Èô§ gradle ÁºìÂ≠ò: ${totalDeleted} Êù°`);
            }
