syntax = "proto3";
package com.owo233.tcqt.entries;

import "com/owo233/tcqt/entries/QQMessage.proto";

option java_package = "com.owo233.tcqt.entries";

// proto有3个字段修饰符required(必选),optional(可选),repeated(重复)
// 咱们的proto文件不使用required,只用optional,因为咱们也不知道哪个字段什么时候才有值,如果是数组一律用repeated修饰.
// 消息只是包含一组类型化字段的聚合。许多标准简单数据类型都可用作字段类型，包括 bool 、 int32 、 float 、 double 和 string
// peerId 就是 uin（是数字），uid是乱七八糟的字母

message InfoSyncPush {
  optional uint32 result = 1;
  optional string err_msg = 2;
  uint32 push_flag = 3; // 同步类型
  optional uint32 push_seq = 4; // 没啥用的信息貌似
  optional uint32 retry_flag = 5;

  SyncContent sync_content = 7; // 普通消息同步内容
  SyncRecallOperateInfo sync_msg_recall = 8;  // 撤回操作的操作信息
  optional bytes sync_guild_info = 9; // sync guild
  optional uint32 use_init_cache_data = 10;

  message SyncContent {
    repeated GroupSyncContent group_sync_content = 3; // 每个群的同步信息

    message GroupSyncContent {
      int64 group_peer_id = 3;  // 群聊的 peerId
      int32 start_seq = 4; //同步的开始seq
      int32 end_seq = 5; // 同步的结束seq

      // 如果移除撤回的信息，就在这里就移除了
      repeated QQMessage qq_message = 6;  // 消息数组，数组的数量为 endSeq - startSeq
    }
  }


  message SyncRecallOperateInfo {
    SyncInfoHead sync_info_head = 3;
    repeated SyncInfoBody sync_info_body = 4;
    SyncInfoHead sub_head = 5;

    message SyncInfoHead {
      int64 sync_time = 1;
    }

    message SyncInfoBody {
      int64 sender_peer_id = 1;
      string sender_uid = 2;
      int64 event_time = 5;
      repeated QQMessage msg = 8;
    }
  }
}
